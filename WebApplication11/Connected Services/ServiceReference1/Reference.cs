//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication11.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Review", Namespace="http://schemas.datacontract.org/2004/07/RatingServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Review : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MemberIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ratingField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MemberId {
            get {
                return this.MemberIdField;
            }
            set {
                if ((object.ReferenceEquals(this.MemberIdField, value) != true)) {
                    this.MemberIdField = value;
                    this.RaisePropertyChanged("MemberId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductId {
            get {
                return this.ProductIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductIdField, value) != true)) {
                    this.ProductIdField = value;
                    this.RaisePropertyChanged("ProductId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double rating {
            get {
                return this.ratingField;
            }
            set {
                if ((this.ratingField.Equals(value) != true)) {
                    this.ratingField = value;
                    this.RaisePropertyChanged("rating");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRatingRecord", ReplyAction="http://tempuri.org/IService1/AddRatingRecordResponse")]
        string AddRatingRecord(string productid, string memberid, string comment, double rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddRatingRecord", ReplyAction="http://tempuri.org/IService1/AddRatingRecordResponse")]
        System.Threading.Tasks.Task<string> AddRatingRecordAsync(string productid, string memberid, string comment, double rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteRating", ReplyAction="http://tempuri.org/IService1/DeleteRatingResponse")]
        bool DeleteRating(string pid, string mid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteRating", ReplyAction="http://tempuri.org/IService1/DeleteRatingResponse")]
        System.Threading.Tasks.Task<bool> DeleteRatingAsync(string pid, string mid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateRating", ReplyAction="http://tempuri.org/IService1/UpdateRatingResponse")]
        bool UpdateRating(string productid, string memberid, string comment, double rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateRating", ReplyAction="http://tempuri.org/IService1/UpdateRatingResponse")]
        System.Threading.Tasks.Task<bool> UpdateRatingAsync(string productid, string memberid, string comment, double rating);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchByMember", ReplyAction="http://tempuri.org/IService1/SearchByMemberResponse")]
        WebApplication11.ServiceReference1.Review[] SearchByMember(string memberid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchByMember", ReplyAction="http://tempuri.org/IService1/SearchByMemberResponse")]
        System.Threading.Tasks.Task<WebApplication11.ServiceReference1.Review[]> SearchByMemberAsync(string memberid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchByProduct", ReplyAction="http://tempuri.org/IService1/SearchByProductResponse")]
        WebApplication11.ServiceReference1.Review[] SearchByProduct(string prdId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SearchByProduct", ReplyAction="http://tempuri.org/IService1/SearchByProductResponse")]
        System.Threading.Tasks.Task<WebApplication11.ServiceReference1.Review[]> SearchByProductAsync(string prdId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/printReviews", ReplyAction="http://tempuri.org/IService1/printReviewsResponse")]
        WebApplication11.ServiceReference1.Review[] printReviews();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/printReviews", ReplyAction="http://tempuri.org/IService1/printReviewsResponse")]
        System.Threading.Tasks.Task<WebApplication11.ServiceReference1.Review[]> printReviewsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WebApplication11.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WebApplication11.ServiceReference1.IService1>, WebApplication11.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddRatingRecord(string productid, string memberid, string comment, double rating) {
            return base.Channel.AddRatingRecord(productid, memberid, comment, rating);
        }
        
        public System.Threading.Tasks.Task<string> AddRatingRecordAsync(string productid, string memberid, string comment, double rating) {
            return base.Channel.AddRatingRecordAsync(productid, memberid, comment, rating);
        }
        
        public bool DeleteRating(string pid, string mid) {
            return base.Channel.DeleteRating(pid, mid);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRatingAsync(string pid, string mid) {
            return base.Channel.DeleteRatingAsync(pid, mid);
        }
        
        public bool UpdateRating(string productid, string memberid, string comment, double rating) {
            return base.Channel.UpdateRating(productid, memberid, comment, rating);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRatingAsync(string productid, string memberid, string comment, double rating) {
            return base.Channel.UpdateRatingAsync(productid, memberid, comment, rating);
        }
        
        public WebApplication11.ServiceReference1.Review[] SearchByMember(string memberid) {
            return base.Channel.SearchByMember(memberid);
        }
        
        public System.Threading.Tasks.Task<WebApplication11.ServiceReference1.Review[]> SearchByMemberAsync(string memberid) {
            return base.Channel.SearchByMemberAsync(memberid);
        }
        
        public WebApplication11.ServiceReference1.Review[] SearchByProduct(string prdId) {
            return base.Channel.SearchByProduct(prdId);
        }
        
        public System.Threading.Tasks.Task<WebApplication11.ServiceReference1.Review[]> SearchByProductAsync(string prdId) {
            return base.Channel.SearchByProductAsync(prdId);
        }
        
        public WebApplication11.ServiceReference1.Review[] printReviews() {
            return base.Channel.printReviews();
        }
        
        public System.Threading.Tasks.Task<WebApplication11.ServiceReference1.Review[]> printReviewsAsync() {
            return base.Channel.printReviewsAsync();
        }
    }
}
